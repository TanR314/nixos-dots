\usepackage{asymptote}
\begin{asydef}
	defaultpen(fontsize(10pt));
	size(8cm);
	usepackage("amsmath");
	usepackage("amssymb");
	import geometry;
	import x11colors;

	pen bpp = linewidth(1mm);

	// Utilities


	void ma(string label="", pair A, pair O, pair B,real radius=0.5cm,pen myPen = black) {
			markangle("$" + label + "$",A,O,B,radius = radius,myPen);
		}
  void rma(pair A, pair O, pair B) {
    markrightangle(A,O,B);
  }

	pair IP(circle c, circle w) {
			return intersectionpoints(c,w)[0];
		}
	pair dIP(string label="",circle c,circle w, pair location=SW) {
			dot("$"+label+"$", intersectionpoints(c,w)[0],location,bpp);
			return intersectionpoints(c,w)[0];
		}
	pair IP(circle c, line l) {
			return intersectionpoints(c,l)[0];
		}
	pair dIP(string label="",circle c,line l,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[0],location,bpp);
			return intersectionpoints(c,l)[0];
		}
	pair IP(line l, circle c) {
			return intersectionpoints(l,c)[0];
		}
	pair dIP(string label="",line l, circle c,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[0],location,bpp);
			return intersectionpoints(l,c)[0];
		}
	pair IP(arc c, line l) {
			return intersectionpoints(c,l)[0];
		}
	pair dIP(string label="",arc c, line l, pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[0],location,bpp);
			return intersectionpoints(c,l)[0];
		}
	pair IP(line l, arc c) {
			return intersectionpoints(l,c)[0];
		}
	pair dIP(string label="",line l,arc c,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[0],location,bpp);
			return intersectionpoints(l,c)[0];
		}
	pair IP(arc p, arc q) {
			return intersectionpoints(p,q)[0];
		}
	pair dIP(string label="", arc p, arc q, pair location=SW) {
			dot("$"+label+"$",intersectionpoints(p,q)[0],location,bpp);
			return intersectionpoints(p,q)[0];
		}
	pair OP(circle c, circle w) {
			return intersectionpoints(c,w)[1];
		}
	pair dOP(string label="",circle c,circle w, pair location=SW) {
			dot("$"+label+"$", intersectionpoints(c,w)[1],location,bpp);
			return intersectionpoints(c,w)[1];
		}
	pair OP(circle c, line l) {
			return intersectionpoints(c,l)[1];
		}
	pair dOP(string label = "",circle c, line l,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[1],location,bpp);
			return intersectionpoints(c,l)[1];
		}
	pair OP(line l,circle c) {
			return intersectionpoints(c,l)[1];
		}
	pair dOP(string label="",line l,circle c,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[1],location,bpp);
			return intersectionpoints(c,l)[1];
		}
	pair OP(arc c, line l) {
			return intersectionpoints(c,l)[1];
		}
	pair dOP(string label="",arc c, line l,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[1],location,bpp);
			return intersectionpoints(c,l)[1];
		}
	pair OP(line l, arc c) {
			return intersectionpoints(c,l)[1];
		}
	pair dOP(string label="",line l, arc c,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(c,l)[1],location,bpp);
			return intersectionpoints(c,l)[1];
		}
	pair OP(arc p, arc q) {
			return intersectionpoints(p,q)[1];
		}
	pair dOP(string label="",arc p, arc q,pair location=SW) {
			dot("$"+label+"$",intersectionpoints(p,q)[1],location,bpp);
			return intersectionpoints(p,q)[1];
		}
	pair IN(line p, line q) {
			return intersectionpoint(p,q);
		}
	pair dIN(string label="",line p, line q,pair location=SW) {
			dot("$"+label+"$",intersectionpoint(p,q),location,bpp);
			return intersectionpoint(p,q);
		}










	pair p(real x, real y=1) {
			pair P = y*dir(x);
			return P;
		}
	line l(pair A,pair B) {
			return line(A,B);
		}
	segment s(pair A,pair B) {
			return segment(A,B);
		}
	triangle tri(pair A, pair B, pair C) {
			return triangle(A,B,C);
		}



	circle c(triangle s) {
			return circle(s);
		}
	circle c(pair A, pair B) {
			return circle(A,B);
		}
	circle CP(pair O, pair P) {
			pair X = (abs(P-O)*4/5,abs(P-O)*3/5);
			return c(O+X,O-X);
		}
	circle c(pair A, pair B, pair C) {
			return circle(A,B,C);
		}
	arc sc(pair A,pair B) {
			return arcsubtended(A,B,90);
		}
	line[] tg(pair P, circle c) {
			return tangents(c,P);
		}
	/*pair [] tgfoot(pair P, circle c) {*/
	/*		return [*/
	/*				IP(tg(P,c)[0],c),*/
	/*				IP(tg(P,c)[1],c)*/
	/*			];*/
	/*	}*/
	line t(pair P, circle c) {
			return tangent(c,P);
		}



	pair center(pair A,pair B,pair C) {
			return c(A,B,C).C;
		}
	pair mid(pair A, pair B) {
			return (A+B)/2;
		}



	line perp(pair P, line l) {
			return perpendicular(P,l);
		}
	line perp(pair P, pair B, pair C) {
			return perp(P,l(B,C));
		}
	pair foot(pair P, pair A, pair B) {
			return foot(triangle(A,B,P).VC);
		}
	pair foot(pair P, line l) {
			point X = IN(perp(P,l),l);
			return X;
		}
	line alt(pair P, pair B, pair C) {
			return altitude(triangle(P,B,C).VA);
		}
	line alt(pair P, line l) {
			point X = foot(P,l);
			return s(P,X);
		}



	line pb(pair A,pair B) {
			return bisector(s(A,B));
		}
	line pb(segment s) {
			return bisector(s);
		}
	line par(pair P, line s) {
			return parallel(P, s);
		}
	line par(pair P, pair B, pair C) {
			return par(P, l(B,C));
		}




	// Special Points
	pair sym(pair A,pair B, pair C) {
			return IN(t(B,c(A,B,C)),t(C,c(A,B,C)));
		}
	point orth(pair A,pair B,pair C) {
			return orthocenter(tri(A,B,C));
		}
	point in(pair B, pair A, pair C) {
			return incenter(tri(A,B,C));
		}
	point ex(pair B, pair A, pair C) {
			return excenter(tri(B,A,C).AC);
		}
	point centroid(pair A,pair B,pair C) {
			return (A+B+C)/3;
		}





	// Special lines
	line ib(pair B, pair A, pair C) {
			return l(A,in(A,B,C));
		}
	line eb(pair B, pair A, pair C) {
			return l(A,ex(A,B,C));
		}









	pair arcm(pair B, pair A, pair C, bool direction=true) {
			if (direction==true) {
					return IN(eb(B,A,C),pb(B,C));
				} else {
					return IN(ib(B,A,C),pb(B,C));
				}
		}
	line euler(pair A,pair B,pair C, bool draw = true) {
			return l(center(A,B,C), orth(A,B,C));
		}









	pair dp(pair P, string label="",pair location=SW) {
			dot("$"+label+"$",P,location,bpp);
			return P;
		}
	pair dp(string label="", real x, real y = 1,pair location=y*dir(x)) {
			pair P = p(x,y);
			dot("$"+label+"$",P,location,bpp);
			return P;
		}

	line dl(pair A,pair B) {
			draw(l(A,B));
			return l(A,B);
		}
	segment ds(pair A,pair B) {
			draw(s(A,B));
			return s(A,B);
		}
	triangle dtri(pair A, pair B, pair C) {
			draw(tri(A,B,C));
			return tri(A,B,C);
		}



	circle dc(triangle s) {
			draw(c(s));
			return c(s);
		}
	circle dc(pair A, pair B) {
			draw(c(A,B));
			return c(A,B);
		}
	circle dCP(pair O, pair P) {
			draw(CP(O,P));
			return CP(O,P);
		}
	circle dc(pair A, pair B, pair C) {
			draw(c(A,B,C));
			return c(A,B,C);
		}
	arc dsc(pair A,pair B) {
			draw(sc(A,B));
			return sc(A,B);
		}


	pair dcenter(string label="",pair A,pair B,pair C,pair location=SW) {
			dot("$"+label+"$",c(A,B,C).C,location,bpp);
			return c(A,B,C).C;
		}
	pair dmid(string label="",pair A, pair B,pair location=SW) {
			dot("$"+label+"$",(A+B)/2,location,bpp);
			return (A+B)/2;
		}



	line dperp(pair P, pair B, pair C) {
			draw(perp(P,B,C));
			return perp(P,B,C);
		}
	line dperp(pair P, line l) {
			draw(perp(P,l));
			return perp(P,l);
		}
	pair dfoot(string label="",pair P, pair A, pair B,pair location=SW) {
			dot("$"+label+"$",foot(P,A,B),location,bpp);
			return foot(P,A,B);
		}
	pair dfoot(string label="",pair P,line l,pair location=SW) {
			dot("$"+label+"$",foot(P,l),location,bpp);
			return foot(P,l);
		}

	line dalt(pair P, pair B, pair C) {
			draw(alt(P,B,C));
			return alt(P,B,C);
		}
	line dalt(pair P, line l) {
			draw(alt(P,l));
			return alt(P,l);
		}




	line dpb(pair A,pair B) {
			draw(pb(A,B));
			return pb(A,B);
		}
	line dpb(segment s) {
			draw(pb(s));
			return pb(s);
		}
	line dpar(pair P, pair B, pair C) {
			draw(par(P,l(B,C)));
			return par(P,l(B,C));
		}
	line dpar(pair P, line s) {
			draw(par(P,s));
			return par(P,s);
		}








	line dib(pair B, pair A, pair C) {
			draw(ib(B,A,C));
			return ib(B,A,C);
		}
	line deb(pair B, pair A, pair C) {
			draw(eb(B,A,C));
			return eb(B,A,C);
		}




	line[] dtg(pair P, circle c, bool extended = true) {
			if(extended) {
					draw(tg(P,c));
				} else {
					draw(s(P,IP(tg(P,c)[0],c)));
					draw(s(P,IP(tg(P,c)[1],c)));
				}
			return tangents(c,P);
		}
	line dt(pair P, circle c) {
			draw(t(P,c));
			return t(P,c);
		}



	// Special Points
	pair dsym(string label="",pair A,pair B, pair C,pair location=SW) {
			dot("$"+label+"$",sym(A,B,C),location,bpp);
			return sym(A,B,C);
		}
	point dorth(string label="",pair A,pair B,pair C,pair location=SW) {
			dot("$"+label+"$",orth(A,B,C),location,bpp);
			return orth(A,B,C);
		}
	point din(string label="",pair A, pair B, pair C,pair location=SW) {
			dot("$"+label+"$",in(A,B,C),location,bpp);
			return in(A,B,C);
		}
	point dex(string label="",pair A, pair B, pair C,pair location=SW) {
			dot("$"+label+"$",ex(A,B,C),location,bpp);
			return ex(A,B,C);
		}
	point dcentroid(string label="",pair A,pair B,pair C,pair location=SW) {
			dot("$"+label+"$",(A+B+C)/3,location,bpp);
			return (A+B+C)/3;
		}



	pair darcm(string label="",pair B, pair A, pair C, bool direction=true, pair location=SW) {
			dot("$"+label+"$",arcm(B,A,C,direction),location,bpp);
			return arcm(B,A,C,direction);
		}
	line deuler(pair A,pair B,pair C) {
			draw(euler(A,B,C));
			return euler(A,B,C);
		}

\end{asydef}
\newenvironment{diagram}{\begin{asy}}{\end{asy}}
